# first step: follow the instructions here to download the batch of pdb files. https://www.rcsb.org/docs/programmatic-access/batch-downloads-with-shell-script
# put all the pd files you want in id_list.txt and separate each id with comma.

chmod +x batch_download.sh
./batch_download.sh -f id_list.txt -p # this downloads pdb.gz files


#unzip them

find . -name '*.pdb.gz' -exec gunzip {} +


# download fasta files from pdb using the list of pdb_ids  https://www.rcsb.org/downloads/fasta
# rename it as fasta_list.fasta


# download viennaRNA source code and compile for secondary structure prediction, follow https://www.tbi.univie.ac.at/RNA/tutorial/

wget https://www.tbi.univie.ac.at/RNA/download/sourcecode/2_5_x/ViennaRNA-2.5.1.tar.gz
tar -zxf ViennaRNA-[2.1.9].tar.gz


#add this $HOME/Tutorial/Progs/VRP/bin and $HOME/Tutorial/Progs/VRP/share/ViennaRNA/bin to PATH

# run RNAfold for secondary structure prediction
RNAfold < fasta_list.fasta

# copy paste the output into a text file called 'sequence_secondary_struc.txt'.
# first line is fasta description, second line is the sequence and the third line is the secondary structure generated.
# use the python script below to extract fasta primary sequence and secondary structure into separate files.

import json
number = 1
with open('sequence_secondary_struc.txt') as file:
    for line in file.readlines():
        line = line.replace('\n', '')
        if number == 1:
            ID = line[1:7]
            print(ID)
            new_file = open(str(ID)+".fasta", "w")
            new_file.write(line)
            new_file.write('\n')
            new_file.close()
        if number == 2:
            new_file = open(str(ID)+".fasta", "a")
            new_file.write(line.lower())
            new_file.close()
        if number == 3:
            new_file = open(str(ID)+".secstruc", "w")
            new_file.write(line[-7:])
            new_file.close()
            number = 0
        
        number = number +1

# run rosetta to generate 10 tertiary structures using sequence and secondary structure and it outputs a silent file.
# examples are as follows

~/scratch/rosetta/main/source/bin/rna_denovo.cxx11thread.linuxgccrelease -sequence "ggccgaugguagugugggguc" -secstruct "((((.............))))" -nstruct 10 -out:file:silent 1A4D_1.out -minimize_rna
~/scratch/rosetta/main/source/bin/rna_denovo.cxx11thread.linuxgccrelease -sequence "cgcgaauuagcg" -secstruct "(((......)))" -nstruct 2 -out:file:silent 157D_1.out -out:pdb -minimize_rna

~/scratch/rosetta/main/source/bin/rna_denovo.cxx11thread.linuxgccrelease -fasta ~/scratch/farfar2_output/input_files/extraction/dup_chains/split/1I9X_c.fasta -native ~/scratch/farfar2_output/input_files/pdb_files/1I9X.pdb -secstruct "(((((.(((((((,)))).))))))))" -nstruct 10 -out:file:silent 1I9X.out -cycles 1000  -minimize_rna
~/scratch/rosetta/main/source/bin/rna_denovo.cxx11thread.linuxgccrelease -fasta ~/scratch/farfar2_output/input_files/extraction/unique_chains/1A4D_s.fasta -native ~/scratch/farfar2_output/input_files/pdb_files/1A4D.pdb -secstruct "((((.((....((((((((..,.))))))))....)).))))" -nstruct 10 -out:file:silent 1A4D_s.out -cycles 1000  -minimize_rna


~/scratch/rosetta/main/source/bin/rna_denovo.cxx11thread.linuxgccrelease @flags #see below for the flag file 

@flags
-fasta ./extraction/dup_chains/split/157D_c.fasta
-native ./pdb_files/157D.pdb
-secstruct_file ./extraction/dup_chains/split/157D.secstruct
-nstruct 10
-out:file:silent ../output_files/157D.out
-cycles 1000
-minimize_rna


@tutorial farfar2 flag example # just for reference
-fasta rna_puzzle_8_homology.fasta
-native rna_puzzle_8_homology_NATIVE_8_0_solution_4L81_rpr.pdb
-s rna_puzzle_8_homology_START1_8_0_solution_4L81_rpr.pdb   #Input PDBs to be used as fixed 'chunks' in fragment assembly
-working_res A:1-96
-minimize_rna true
-cycles 20000
-nstruct 20
-save_times
-secstruct "(((((....((((....))))(((..((((((.[[[[..))).))).)))..(((((....)))))))))).((((....)))).......]]]]."
-superimpose_over_all
-out:file:silent farna_rebuild.out


# run extract_pdbs to extract structure from the output silent file into separate pdb files. create out_pdb directory in advance

~/scratch/rosetta/main/source/bin/extract_pdbs.cxx11thread.linuxgccrelease -in:file:silent default.out -out:prefix ./out_pdb/
# add -in::file:tags S_00001234 S_00000123 to extract specific frames
~/scratch/rosetta/main/source/bin/extract_pdbs.cxx11thread.linuxgccrelease -in:file:silent 1A4D.out -out:prefix ./out_pdb_1A4D/


# for multi-chain generation

### use ViennaRNA to generate secondary structure 

RNAcofold < 1A4D.fasta

# 1A4D.fasta file shown below is a concatenation of chain A and chain B with '&'
>1A4D|Chain A|RNA (5'-R(*GP*GP*CP*CP*GP*AP*UP*GP*GP*UP*AP*GP*UP*GP*UP*GP*GP*GP*GP*UP*C)-3')|Escherichia coli (562)
ggccgaugguagugugggguc&uccccaugcgagaguaggcc

# the output in the terminal will be like this
>1A4D|Chain A|RNA (5'-R(*GP*GP*CP*CP*GP*AP*UP*GP*GP*UP*AP*GP*UP*GP*UP*GP*GP*GP*GP*UP*C)-3')|Escherichia coli (562)
ggccgaugguagugugggguc&uccccaugcgagaguaggcc 
((((.((....((((((((..&.))))))))....)).))))

# copy paste the secondary structure and change '&' to ',' for FARFAR2 input below


### use FARFAR2 to generate tertiary structure

# fasta file
>1A4D_1|Chain A|RNA (5'-R(*GP*GP*CP*CP*GP*AP*UP*GP*GP*UP*AP*GP*UP*GP*UP*GP*GP*GP*GP*UP*C)-3')|Escherichia coli (562)
ggccgaugguagugugggguc
>1A4D_2|Chain B|RNA (5'-R(P*UP*CP*CP*CP*CP*AP*UP*GP*CP*GP*AP*GP*AP*GP*UP*AP*GP*GP*CP*C)-3')|Escherichia coli (562)
uccccaugcgagaguaggcc

# secstruc "((((.((....((((((((..,.))))))))....)).))))" # separated by comma

# use the following command in the output folder
~/scratch/rosetta/main/source/bin/rna_denovo.cxx11thread.linuxgccrelease -fasta ~/scratch/farfar2_output/input_files/extraction/unique_chains/1A4D_s.fasta -native ~/scratch/farfar2_output/input_files/pdb_files/1A4D.pdb -secstruct "((((.((....((((((((..,.))))))))....)).))))" -nstruct 10 -out:file:silent 1A4D_s.out -cycles 1000  -minimize_rna


### add rosetta to PATH 
/home/liuxr/scratch/rosetta/main/source/bin


# extract rms value from the output pdb file

import json
with open('S_000001.pdb') as file:
    for line in file.readlines():
        line = line.replace('\n', '')
        if ('rms' in line) and ('stem' not in line):
            new_file = open("S_000001.txt", "w")
            new_file.write(line[4:])
            new_file.close()


### count the number of nucleotides in a sequence 

import os
#list_id = ['157D','1A4D','1CSL','1DQF','1ESY','1I9X','1KD5','1KKA','1L2X','1MHK','1Q9A','1QWA','1XJR','255D','283D','28SP','2A43','2F88']
entries = os.scandir(r'./extraction') # change it to your directory that stores fasta files
# for individual values in separate files
for entry in entries:
    ext = os.path.splitext(entry)[-1].lower()
    print(ext)
    if ext==".fasta":
        with open(entry) as file:
            line = file.readlines()[1]
            line = line.replace('\n', '')
            file_full_name = os.path.basename(entry)
            file_name = os.path.splitext(file_full_name)[0]
            print(file_name)
            new_file = open(file_name+"_length.txt", "w")
            new_file.write(str(len(line)))
            new_file.close()

# for values store in one file
for entry in entries:
    ext = os.path.splitext(entry)[-1].lower()
    print(ext)
    if ext==".fasta":
        with open(entry) as file:
            line = file.readlines()[1]
            line = line.replace('\n', '')
            file_full_name = os.path.basename(entry)
            file_name = os.path.splitext(file_full_name)[0]
            print(file_name)
            new_file = open("fasta_length.txt", "a")
            new_file.write(file_name + ':' + str(len(line)) + '\n')
            new_file.close()


### extract the rms value from each pdb file

import os
entries = os.scandir(r'./') # change it to your directory that stores pdb files
# for individual values in separate files
for entry in entries:
    ext = os.path.splitext(entry)[-1].lower()
    if ext==".pdb":
        with open(entry) as file:
            for line in file.readlines():
                line = line.replace('\n', '')
                if ('rms' in line) and ('stem' not in line):
                    file_full_name = os.path.basename(entry)
                    file_name = os.path.splitext(file_full_name)[0]
                    new_file = open(file_name+"_rms.txt", "w")
                    new_file.write(line[4:])
                    new_file.close()

# for values store in one file 
# create a dictionary TODO
for entry in entries:
    ext = os.path.splitext(entry)[-1].lower()
    print(ext)
    if ext==".pdb":
        print('pdb')
        with open(entry) as file:
            for line in file.readlines():
                line = line.replace('\n', '')
                if ('rms' in line) and ('stem' not in line):
                    file_full_name = os.path.basename(entry)
                    file_name = os.path.splitext(file_full_name)[0]
                    new_file = open("pdb_rms.txt", "a")
                    new_file.write(file_name + ':' + line[4:] + '\n')
                    new_file.close()

# result 
S_000001:10.39
S_000002:10.106
S_000003:10.16
S_000004:10.457
S_000005:10.072
S_000006:10.349
S_000007:10.948
S_000008:10.35
S_000009:10.682
S_000010:10.004


### hydrogen_check

from Bio import PDB
import os

# Define a function to check for hydrogen atoms
def has_hydrogen_atoms(structure):
    for model in structure:
        for chain in model:
            for residue in chain:
                for atom in residue:
                    if atom.element == "H":
                        return True
    return False

# Load the PDB file
parser = PDB.PDBParser()
# change it to your directory that stores pdb files
entries = os.scandir(r'./')
# for individual values in separate files
for entry in entries:
    ext = os.path.splitext(entry)[-1].lower()
    if ext==".pdb":
        file_full_name = os.path.basename(entry)
        file_name = os.path.splitext(file_full_name)[0]
        new_file = open("hydrogen_check.txt", "a")
        structure = parser.get_structure("S"+file_name, entry)
        if has_hydrogen_atoms(structure):
            new_file.write(file_name + " contains at least one hydrogen atom.\n")
            new_file.close()
        else:
            new_file.write(file_name + " doesn't contain any hydrogen atoms.\n")
            new_file.close()


# Define a function to count the number of hydrogen atoms
def hydrogen_atoms_number(structure):
    number = 0
    for model in structure:
        for chain in model:
            for residue in chain:
                for atom in residue:
                    if atom.element == "H":
                        number = number+1
    return number

# Load the PDB file
parser = PDB.PDBParser()
# change it to your directory that stores pdb files
entries = os.scandir(r'./') 
# for individual values in separate files
for entry in entries:
    ext = os.path.splitext(entry)[-1].lower()
    if ext==".pdb":
        file_full_name = os.path.basename(entry)
        file_name = os.path.splitext(file_full_name)[0]
        new_file = open("hydrogen_number_pdb.txt", "a")
        structure = parser.get_structure("S"+file_name, entry)
        number_hydrogen = hydrogen_atoms_number(structure)
        if  number_hydrogen > 0:
            new_file.write(file_name + " contains " + str(number_hydrogen) + " hydrogen atoms.\n")
            new_file.close()
        else:
            new_file.write(file_name+" doesn't contain any hydrogen atoms.\n")
            new_file.close()


### print sequence information
import json
import os
#list_id = ['157D','1A4D','1CSL','1DQF','1ESY','1I9X','1KD5','1KKA','1L2X','1MHK','1Q9A','1QWA','1XJR','255D','283D','28SP','2A43','2F88']

file = open("fasta_info_list.fasta","r")
number = 0
# generate sequence information. note down ID, number of chains, chain 1: length of sequence, chain 2: length of sequence
for line in file.readlines():
    line = line.replace('\n', '')
    num_chain = 1
    if number == 0:
        file_name = line[1:5]
        new_file = open("sequence_info.txt", "a")
        new_file.write(file_name + ' ' )
        if ("Chains A, B" in line):
            num_chain = 2
            new_file.write("number of chains: " + str(num_chain))
        elif ("Chain A" in line):
            num_chain = 1
            new_file.write("number of chains: " + str(num_chain))
            new_file.write(", chain 1: ")
        elif ("Chain B" in line):
            num_chain = 1
            new_file.write(", chain 2: ")
    else:
        new_file = open("sequence_info.txt", "a")
        new_file.write("length: " + str(len(line)) + '\n')
    
    new_file.close()
    number = (number + 1)%2

# formatted results
Need to regenerate using RNAcofold
#folder one
157D number of chains: 2, length: 12
1I9X number of chains: 2, length: 13
1KD5 number of chains: 2, length: 11
#folder two
1A4D number of chains: 2, chain 1: length: 21, chain 2: length: 20
1CSL number of chains: 2, chain 1: length: 13, chain 2: length: 15
1DQF number of chains: 2, chain 1: length: 9, chain 2: length: 10
1MHK number of chains: 2, chain 1: length: 12, chain 2: length: 14
Already done using RNAfold
#folder three
1ESY number of chains: 1, chain 1: length: 19
1KKA number of chains: 1, chain 1: length: 17
1L2X number of chains: 1, chain 1: length: 28
1Q9A number of chains: 1, chain 1: length: 27
1QWA number of chains: 1, chain 1: length: 21
1XJR number of chains: 1, chain 1: length: 47
255D number of chains: 1, chain 1: length: 12
283D number of chains: 1, chain 1: length: 12
28SP number of chains: 1, chain 1: length: 28
2A43 number of chains: 1, chain 1: length: 26
2F88 number of chains: 1, chain 1: length: 34


### concatenate two files and separate them by a new line
cat 1A4D_1.secstruc <(echo) 1A4D_2.secstruc > 1A4D.secstruc
cat 1A4D_1.fasta <(echo) 1A4D_2.fasta > 1A4D.fasta
$ echo "$(sed -n '2p' file1),$(sed -n '2p' file2)" > newfile

RNAcofold < 1A4D.fasta | sed -n 3p > 1A4D.secstruct
time 

#####Trials for multi-stranded secondary structure prediction using VienneRNA RNAfold and RNAcofold
###Example 1

# separate prediction (original)
>1A4D_1|Chain A|RNA (5'-R(*GP*GP*CP*CP*GP*AP*UP*GP*GP*UP*AP*GP*UP*GP*UP*GP*GP*GP*GP*UP*C)-3')|Escherichia coli (562)
ggccgaugguagugugggguc
((((.............)))) ( -2.90)
>1A4D_2|Chain B|RNA (5'-R(P*UP*CP*CP*CP*CP*AP*UP*GP*CP*GP*AP*GP*AP*GP*UP*AP*GP*GP*CP*C)-3')|Escherichia coli (562)
uccccaugcgagaguaggcc
...((.(((....))))).. ( -2.50)

# comma separated, RNAfold
>1A4D|Chain A|RNA (5'-R(*GP*GP*CP*CP*GP*AP*UP*GP*GP*UP*AP*GP*UP*GP*UP*GP*GP*GP*GP*UP*C)-3')|Escherichia coli (562)
ggccgaugguagugugggguc,uccccaugcgagaguaggcc
((((.((....((((((((....))))))))....)).)))) (-20.80)

# direct concatenation
>1A4D|Chain A|RNA (5'-R(*GP*GP*CP*CP*GP*AP*UP*GP*GP*UP*AP*GP*UP*GP*UP*GP*GP*GP*GP*UP*C)-3')|Escherichia coli (562)
ggccgaugguaguguggggucuccccaugcgagaguaggcc
((((.((....((((((((...))))))))....)).)))) (-19.40)

# & separated
WARNING: vrna_file_PS_rnaplot*(): Sequence, structure, and coordinate layout have different lengths! (42 vs. 41 vs. 41)
>1A4D|Chain A|RNA (5'-R(*GP*GP*CP*CP*GP*AP*UP*GP*GP*UP*AP*GP*UP*GP*UP*GP*GP*GP*GP*UP*C)-3')|Escherichia coli (562)
ggccgaugguagugugggguc&uccccaugcgagaguaggcc
((((.((....((((((((...))))))))....)).)))) (-21.40)

# using RNAcofold
RNAcofold < example.fasta
ggccgaugguagugugggguc&uccccaugcgagaguaggcc
((((.((....((((((((.&..))))))))....)).)))) (-21.40)



###Example 2
>5y87 A:1-18
acccgcaaggccgacggc
>5y87 B:1-50
gccgccgcuggugcaaguccagccacgcuucggcgugggcgcucaugggu

#in a farfar2 documentation # https://rosie.rosettacommons.org/farfar2/documentation
Their prediction: In our original modeling, we had guessed at the secondary structure using the literature alignment of twister sister ribozymes from Breaker and our previous experience with prediction RNA-Puzzle 19 (PDB: 5T5A).
((((...((((((.((((,)))).)(((((.......)))))(((((....)))))))).))...))))

# My trials:
# comma separated, RNAfold
acccgcaaggccgacggc,gccgccgcuggugcaaguccagccacgcuucggcgugggcgcucaugggu
(((((..(((((...(((,...)))(((((.......)))))(((((....)))))))).))..))))) (-30.50)

# direct concatenation
RNAfold < example.fasta
acccgcaaggccgacggcgccgccgcuggugcaaguccagccacgcuucggcgugggcgcucaugggu
(((((..(((((.(((.((..((.(((((.......)))))...))..)).))).))).))..))))) (-32.50)

# & separated
WARNING: vrna_file_PS_rnaplot*(): Sequence, structure, and coordinate layout have different lengths! (69 vs. 68 vs. 68)
acccgcaaggccgacggc&gccgccgcuggugcaaguccagccacgcuucggcgugggcgcucaugggu
(((((..(((((..(((())))..(((((.......)))))(((((....)))))))).))..))))) (-32.90)

# using RNAcofold
RNAcofold < example.fasta
acccgcaaggccgacggc&gccgccgcuggugcaaguccagccacgcuucggcgugggcgcucaugggu                                                                       cgcucaugggu
(((((..(((((..((((&))))..(((((.......)))))(((((....)))))))).))..))))) (-32.90)

RNAcofold < example.fasta
acccgcaaggccgacggcgccgccgcuggugcaaguccagccacgcuucggcgugggcgcucaugggu
(((((..(((((.(((.((..((.(((((.......)))))...))..)).))).))).))..))))) (-32.50)



###Example 3
>157D_orig A:1-12 B:13-24 # same sequence for strand A and strand B
cgcgaauuagcgcgcgaauuagcg

# in the paper FARFAR2: Improved De Novo Rosetta Prediction of Complex Global RNA Folds
# their secondary structure prediction, doesn't say how they generated
(((.((((.(((,))).)))).)))

RNAfold < example.fasta
WARNING: vrna_file_PS_rnaplot*(): Sequence, structure, and coordinate layout have different lengths! (25 vs. 24 vs. 24)
cgcgaauuagcg&cgcgaauuagcg
(((.((((.((())).)))).))) ( -8.00)

RNAcofold < example.fasta
WARNING: Both input strands are identical, thus inducing rotationally symmetry! Symmetry correction might be required to compute actual MFE!
cgcgaauuagcg&cgcgaauuagcg
(((.((((.(((&))).)))).))) ( -8.00)

# put in separate line but same file
RNAfold < example.fasta
cgcgaauuagcg
(((......))) ( -2.70)
cgcgaauuagcg
(((......))) ( -2.70)

# direct concatenation
RNAfold < example.fasta
cgcgaauuagcgcgcgaauuagcg
(((......)))(((......))) ( -6.00)



### get the second line of stdin output, which is secondary structure, into a file. scripts.sh in ~/scratch/farfar2_output/input_files/extraction/unique_chains

#!/bin/bash

# Assign a value to a variable
declare -a list=("1CSL" "1DQF" "1MHK")

# Loop through a sequence of numbers using the variable
for i in ${list[@]};
do
        echo ${i}
        RNAcofold < ${i}.fasta | sed -n 2p > ${i}.secstruct
done



### bash file to generate 1000 structures per pdbID with pre-generated flags. Time is noted down and recorded in a file.

#!/bin/bash

# Assign a value to a variable
declare -a list=("1ESY" "1KKA" "1L2X" "1Q9A" "1QWA" "1XJR" "255D" "283D" "28SP" "2A43" "2F88")

# Loop through a sequence of numbers using the variable
for i in ${list[@]};
do
        echo ${i} >> single_chain_results.txt
        (time rna_denovo.cxx11thread.linuxgccrelease @${i}_flags) 2>> single_chain_results.txt

done



### extract_pdbs_from_silent.sh in ~/scratch/farfar2_output/output_files

#!/bin/bash

# Assign a value to a variable
declare -a list=("157D" "1I9X" "1KD5")
#"1ESY" "1KKA" "1L2X" "1Q9A" "1QWA" "1XJR" "255D" "283D" "28SP" "2A43" "2F88"

# Loop through a sequence of numbers using the variable
for i in ${list[@]};
do
        mkdir out_pdb_${i}
        extract_pdbs.cxx11thread.linuxgccrelease -in:file:silent ${i}.out -out:prefix ./out_pdb_${i}/
done



### extract_rms_values.sh in ~/scratch/farfar2_output/output_files/rms_analysis

#!/bin/bash

# Assign a value to a variable
declare -a list=("157D" "1I9X" "1KD5")
#"1ESY" "1KKA" "1L2X" "1Q9A" "1QWA" "1XJR" "255D" "283D" "28SP" "2A43" "2F88"

# Loop through a sequence of numbers using the variable
for i in ${list[@]};
do
        python Scripts_for_rms_extraction.py ${i}
done


### Scripts_for_rms_analysis.py in windows jupyter notebook

# read data from python files
fs = 10  # fontsize
ID_list = ["157D","1I9X","1KD5"]
data = [None] * len(ID_list)
idx = 0

for ID in ID_list:
    file = open(r'./'+ID+'_pdb_rms.txt') 
    array = []
    for line in file.readlines():
        line = line.replace('\n', '')
        if (':' in line):
            array.append((float(line.split(":")[-1])))
   
    data[idx] = array
    idx = idx+1

# violin plot
pos = [1, 2, 3]
plt.figure()
ax = plt.subplot(111)
plt.violinplot(data, pos, showmedians=True, showextrema=True)
plt.xlabel('pdb ID')
plt.ylabel('RMSD value')
ax.set_xticks(pos)
ax.set_xticklabels(ID_list)

# box plot
pos = [1, 2, 3]
plt.figure()
ax = plt.subplot(111)
plt.boxplot(data, pos)
plt.xlabel('pdb ID')
plt.ylabel('RMSD value')
ax.set_xticks(pos)
ax.set_xticklabels(ID_list)

# rms statistics 
idx = 0
for ID in ID_list:
    new_file = open(r'./pdb_rms_statistics.txt', "a") 
    new_file.write(ID+"\n")
    new_file.write("mean: "+str(np.mean(data[idx]))+"\n")
    new_file.write("medium: "+str(np.median(data[idx]))+"\n")
    new_file.write("minimum: "+str(np.min(data[idx]))+"\n")
    new_file.write("maximum: "+str(np.max(data[idx]))+"\n")
    new_file.write("std: "+str(np.std(data[idx]))+"\n")
    new_file.close()
    idx = idx+1


